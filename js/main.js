!function(t){function e(t){t=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(t,e,i,a){return e+e+i+i+a+a});var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}function i(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function a(){return i()+i()+"-"+i()+"-"+i()+"-"+i()+"-"+i()+i()+i()}var s={},r=function(e,i){this.element=e,this.container,this.timer=null,this.data={text_elements:{Days:null,Hours:null,Minutes:null,Seconds:null},attributes:{canvas:null,context:null,item_size:null,line_width:null,radius:null,outer_radius:null},state:{fading:{Days:!1,Hours:!1,Minutes:!1,Seconds:!1}}},this.listeners=[],this.config=null,this.setOptions(i),this.container=t("<div>"),this.container.addClass("time_circles"),this.container.appendTo(this.element),this.data.attributes.canvas=t("<canvas>"),this.data.attributes.context=this.data.attributes.canvas[0].getContext("2d");var a=this.element.offsetHeight,s=this.element.offsetWidth;0===a&&s>0?a=s/4:0===s&&a>0&&(s=4*a),this.data.attributes.canvas[0].height=a,this.data.attributes.canvas[0].width=s,this.data.attributes.canvas.appendTo(this.container),this.data.attributes.item_size=Math.min(this.data.attributes.canvas[0].width/4,this.data.attributes.canvas[0].height),this.data.attributes.line_width=this.data.attributes.item_size*this.config.fg_width,this.data.attributes.radius=(.8*this.data.attributes.item_size-this.data.attributes.line_width)/2,this.data.attributes.outer_radius=this.data.attributes.radius+.5*Math.max(this.data.attributes.line_width,this.data.attributes.line_width*this.config.bg_width);var r=0;for(var n in this.data.text_elements){var o=t("<div>");o.addClass("textDiv_"+n),o.css("top",Math.round(.35*this.data.attributes.item_size)),o.css("left",Math.round(r++*this.data.attributes.item_size)),o.css("width",this.data.attributes.item_size),o.appendTo(this.container);var h=t("<h4>");h.text(this.config.time[n].text),h.css("font-size",Math.round(.07*this.data.attributes.item_size)),h.css("line-height",Math.round(.07*this.data.attributes.item_size)+"px"),h.appendTo(o);var d=t("<span>");d.css("font-size",Math.round(.21*this.data.attributes.item_size)),d.css("line-height",Math.round(.07*this.data.attributes.item_size)+"px"),d.appendTo(o),this.data.text_elements[n]=d}this.config.start&&this.start()};r.prototype.updateArc=function(){var t,e,i=1e3*this.config.refresh_interval,a=new Date;if(this.config.count_past_zero){var s=a-i;t=Math.abs(a-this.data.attributes.ref_date)/1e3,e=Math.abs(this.data.attributes.ref_date-s)/1e3}else t=Math.max(this.data.attributes.ref_date-a,0)/1e3,e=t+(a>this.data.attributes.ref_date)?0:i;var r={Days:t/60/60/24,Hours:t/60/60%24,Minutes:t/60%60,Seconds:t%60},n={Days:r.Days/365,Hours:r.Hours/24,Minutes:r.Minutes/60,Seconds:r.Seconds/60},o={Days:e/60/60/24,Hours:e/60/60%24,Minutes:e/60%60,Seconds:e%60},h=0,d=null;for(var u in r){this.data.text_elements[u].text(Math.floor(r[u]));var c=h*this.data.attributes.item_size+this.data.attributes.item_size/2,l=this.data.attributes.item_size/2,f=this.config.time[u].color;Math.floor(r[u])!==Math.floor(o[u])&&this.notifyListeners(u,Math.floor(r[u]),Math.floor(t)),null!==d&&(Math.floor(r[d])>Math.floor(o[d])?(this.radialFade(c,l,f,1,u),this.data.state.fading[u]=!0):Math.floor(r[d])<Math.floor(o[d])&&(this.radialFade(c,l,f,0,u),this.data.state.fading[u]=!0)),this.data.state.fading[u]||this.drawArc(c,l,f,n[u]),d=u,h++}},r.prototype.drawArc=function(t,e,i,a){var s=Math.max(this.data.attributes.outer_radius,this.data.attributes.item_size/2);this.data.attributes.context.clearRect(t-s,e-s,2*s,2*s),this.config.use_background&&(this.data.attributes.context.beginPath(),this.data.attributes.context.arc(t,e,this.data.attributes.radius,0,2*Math.PI,!1),this.data.attributes.context.lineWidth=this.data.attributes.line_width*this.config.bg_width,this.data.attributes.context.strokeStyle=this.config.circle_bg_color,this.data.attributes.context.stroke());var r=-.5*Math.PI,n=-.5*Math.PI+2*a*Math.PI;this.data.attributes.context.beginPath(),this.data.attributes.context.arc(t,e,this.data.attributes.radius,r,n,!1),this.data.attributes.context.lineWidth=this.data.attributes.line_width,this.data.attributes.context.strokeStyle=i,this.data.attributes.context.stroke()},r.prototype.radialFade=function(t,i,a,s,r){var n,o=e(a),h=this,d=.2*(1===s?-1:1);for(n=0;s<=1&&s>=0;n++)!function(){var e="rgba("+o.r+", "+o.g+", "+o.b+", "+Math.round(10*s)/10+")";setTimeout(function(){h.drawArc(t,i,e,1)},50*n)}(),s+=d;setTimeout(function(){h.data.state.fading[r]=!1},50*n)},r.prototype.timeLeft=function(){var t=new Date;return(this.data.attributes.ref_date-t)/1e3},r.prototype.start=function(){var e=t(this.element).data("date");if("string"==typeof e)e.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{1,2}:[0-9]{2}:[0-9]{2}$/).length>0&&(e=e.replace(" ","T")),this.data.attributes.ref_date=Date.parse(e);else{var i=t(this.element).attr("data-timer");"string"==typeof i?(this.data.attributes.timer=parseFloat(i),t(this.element).removeAttr("data-timer")):"string"==typeof this.config.timer?(this.data.attributes.timer=parseFloat(this.config.timer),this.config.timer=null):"number"==typeof this.config.timer&&(this.data.attributes.timer=a.config.timer,this.config.timer=null),"number"==typeof this.data.attributes.timer?this.data.attributes.ref_date=(new Date).getTime()+1e3*this.data.attributes.timer:this.data.attributes.ref_date=this.config.ref_date}var a=this;this.timer=setInterval(function(){a.updateArc()},1e3*this.config.refresh_interval)},r.prototype.stop=function(){"number"==typeof this.data.attributes.timer&&(this.data.attributes.timer=this.timeLeft(this)),clearInterval(this.timer)},r.prototype.destroy=function(){this.stop(),this.container.remove(),t(this.element).removeData("tc-id")},r.prototype.setOptions=function(e){null===this.config&&(this.default_options.ref_date=new Date,this.config=t.extend(!0,{},this.default_options)),t.extend(!0,this.config,e)},r.prototype.addListener=function(t){"function"==typeof t&&this.listeners.push(t)},r.prototype.notifyListeners=function(t,e,i){for(var a=0;a<this.listeners.length;a++)this.listeners[a](t,e,i)},r.prototype.default_options={ref_date:new Date,start:!0,refresh_interval:.1,count_past_zero:!0,circle_bg_color:"#60686F",use_background:!0,fg_width:.08,bg_width:1,time:{Days:{show:!0,text:"Дней",color:"#FC0"},Hours:{show:!0,text:"Часов",color:"#FC0"},Minutes:{show:!0,text:"Минут",color:"#FC0"},Seconds:{show:!0,text:"Секунд",color:"#FC0"}}};var n=function(t,e){this.elements=t,this.options=e,this.foreach()};n.prototype.foreach=function(e){var i=this;return this.elements.each(function(){var n,o=t(this).data("tc-id");if(void 0===o&&(o=a(),t(this).data("tc-id",o)),void 0===s[o]){var h=t(this).data("options"),d=i.options;"object"==typeof h&&(d=t.extend(!0,{},i.options,h)),n=new r(this,d),s[o]=n}else n=s[o],void 0!==i.options&&n.setOptions(i.options);"function"==typeof e&&e(n)}),this},n.prototype.start=function(){return this.foreach(function(t){t.start()}),this},n.prototype.stop=function(){return this.foreach(function(t){t.stop()}),this},n.prototype.addListener=function(t){return this.foreach(function(e){e.addListener(t)}),this},n.prototype.destroy=function(){return this.foreach(function(t){t.destroy()}),this},n.prototype.end=function(){return this.elements},t.fn.TimeCircles=function(t){return new n(this,t)}}(jQuery),$(document).ready(function(){var t={scaleColor:!1,trackColor:"#fc0",barColor:"#979797",lineWidth:6,lineCap:"butt",size:95};$(".nav-menu_items").click(function(){$(".nav-menu_items li").slideToggle()}),$(".show-menu-aside").click(function(){$(".left-aside").toggle(300),$(".menu-aside-arrowd svg").toggleClass("rotate_90")}),$(".show-mobile-order button").click(function(){$(".left-aside-order").slideToggle()}),window.addEventListener("DOMContentLoaded",function(){var e=[];[].forEach.call(document.querySelectorAll(".chart"),function(i){e.push(new EasyPieChart(i,t))})});var e=$(".someTimer").TimeCircles();$(".fadeIn").click(function(){e.elements.last().fadeIn()}),$(".fadeOut").click(function(){e.elements.last().fadeOut()}),$(".startTimer").click(function(){$(".someTimer").eq(1).TimeCircles().start()}),$(".stopTimer").click(function(){$(".someTimer").eq(1).TimeCircles().stop()}),$(window).scroll(function(){$(this).scrollTop()>453?$(".left-aside-order").css({position:"fixed",top:"0px"}):$(".left-aside-order").css({position:"static"})})});
//# sourceMappingURL=data:application/json;base64,
